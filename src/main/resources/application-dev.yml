server:
  port: ${port:8220}
  undertow:
    max-http-post-size: 0
    # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程,数量和CPU 内核数目一样即可
    io-threads: 4
    # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载  io-threads*8
    worker-threads: 32
    # 以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理
    # 每块buffer的空间大小,越小的空间被利用越充分
    buffer-size: 1024
    # 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
    #   buffers-per-region: 1024 # 这个参数不需要写了
    # 是否分配的直接内存
    direct-buffers: true

logging:
  level:
    org:
      springframework: INFO
    com:
      Timing: DEBUG

spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/job-timing?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: a1234567
    driver-class-name: com.mysql.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      maximum-pool-size: 5
      connection-timeout: 5000
      idle-timeout: 180000
      connection-test-query: SELECT 1
  jpa:
    hibernate:
      ##validate  加载hibernate时，验证创建数据库表结构
      ##create   每次加载hibernate，重新创建数据库表结构，这就是导致数据库表数据丢失的原因。
      ##create-drop        加载hibernate时创建，退出是删除表结构
      ##update                 加载hibernate自动更新数据库结构
      ##validate 启动时验证表的结构，不会创建表
      ##none  启动时不做任何操作 TODO 请手动建表
      ddl-auto: create
        #naming:
      # physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    cache: false
    servlet:
      content-type: text/html